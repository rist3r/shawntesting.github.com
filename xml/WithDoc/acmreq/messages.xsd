<?xml version="1.0" ?> 
<xsd:schema targetNamespace="urn:mtf:mil:6040b:acmreq:B.1.02.06" xml:lang="en-US" xmlns="urn:mtf:mil:6040b:acmreq:B.1.02.06" xmlns:s="urn:mtf:mil:6040b:acmreq:B.1.02.06:set" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ism="urn:us:gov:ic:ism:v2" xmlns:ddms="http://metadata.dod.mil/mdr/ns/DDMS/2.0/" xmlns:ICISM="urn:us:gov:ic:ism:v2" elementFormDefault="unqualified" attributeFormDefault="unqualified">
 <xsd:import namespace="urn:mtf:mil:6040b:acmreq:B.1.02.06:set" schemaLocation="sets.xsd" />
 <xsd:import namespace="urn:us:gov:ic:ism:v2" schemaLocation="IC-ISM-v2.xsd" />
 <xsd:annotation>
  <xsd:appinfo>
   <ddms:security ICISM:classification="U" ICISM:ownerProducer="USA" ICISM:nonICmarkings="DIST_STMT_C" />
  </xsd:appinfo>
  <xsd:appinfo>DISTRIBUTION STATEMENT C. Distribution authorized to U.S. Government Agencies and their contractors only for administrative or operational use. Other requests for this document shall be referred to Defense Information Systems Agency Interoperability Directorate. WARNING - This document contains technical data whose export is restricted by the Arms Export Control Act (Title 22, U.S.C., Sec. 2751) or the Export Administration Act of 1979, as amended, Title 50, U.S.C., App. 2401. Violations of these export laws are subject to severe criminal penalties.  Disseminate in accordance with provisions of DOD Directive 5230.25.</xsd:appinfo>
 </xsd:annotation><xsd:element name="AirspaceCoordinatingMeasureRequest">
 <xsd:annotation>
  <xsd:documentation>The ACMREQ allows the user to request an addition, a modification, or a deletion of a defined block of airspace designated as having special significance.</xsd:documentation>
  <xsd:appinfo>
   <MtfName>AIRSPACE COORDINATING MEASURE REQUEST</MtfName>
   <MtfIdentifier>ACMREQ</MtfIdentifier>
   <MtfIndexReferenceNumber>F658</MtfIndexReferenceNumber>
   <MtfSponsor>USAF</MtfSponsor>
   <MtfPurpose>The ACMREQ allows the user to request an addition, a modification, or a deletion of a defined block of airspace designated as having special significance.</MtfPurpose>
   <MtfRelatedDocument>JP 3-52; ATP 3-52.1/MCWP 3-25.13/NTTP 3-56.4/AFTTP 3-2.78; AJP-3.3.5; JP 3-09</MtfRelatedDocument>
   <MtfRemark>B.1.02.05 was updated by ICP M2017-04, which updated the REF Set.</MtfRemark>
   <MtfNote />
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[3]F1 A /ACMREQ/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in MSGID (Set 3) is assigned the value "ACMREQ".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageTextFormatIdentifier))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageTextFormatIdentifier) eq "ACMREQ")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[3]F2 A /MIL-STD-6040(SERIES)/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in MSGID (Set 3) is assigned the value "MIL-STD-6040(SERIES)".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/StandardOfMessageTextFormat))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/StandardOfMessageTextFormat) eq "MIL-STD-6040(SERIES)")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[3]F3 A /B.1.02.06/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 3 in MSGID (Set 3) is assigned the value "B.1.02.06".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/VersionOfMessageTextFormat))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/VersionOfMessageTextFormat) eq "B.1.02.06")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[4],AF3 R ([4],AF2 EQ /CHT/ | /DOC/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 3 in REF (Set 4) is required if Field 2 in the same REF (Set 4) lexicographically equals "CHT" or "DOC".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/Reference))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/Reference) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/Reference[ $A]/CommunicationType/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/Reference[ $A]/CommunicationType/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/Reference[ $A]/CommunicationType/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/Reference[ $A]/CommunicationType/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/Reference[ $A]/CommunicationType/*)) eq "CHT",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/Reference[ $A]/CommunicationType/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/Reference[ $A]/CommunicationType/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/Reference[ $A]/CommunicationType/*)) eq "DOC")),  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/Reference[ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/Reference[ $A]/InformationProduct) != 0  ))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[6]FG,ZF2 RP ([6]F1 EQ /DELETE/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in every Field Group in CMSTAT (Set 6) is required if Field 1 in CMSTAT (Set 6) lexicographically equals "DELETE" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CoordinatingMeasureStatus/CoordinatingMeasureStatus))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CoordinatingMeasureStatus/CoordinatingMeasureStatus) eq "DELETE")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CoordinatingMeasureStatus))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CoordinatingMeasureStatus/GroupOfFields/CmIdentifier) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CoordinatingMeasureStatus))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CoordinatingMeasureStatus/GroupOfFields/CmIdentifier) = 0</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],Z R (([6] !@) | ([6]F1 EQ /ADD/ | /CHANGE/))</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Every CMID (Segment 7) is required if CMSTAT (Set 6) does not occur or Field 1 in CMSTAT (Set 6) lexicographically equals "ADD" OR "CHANGE".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>xsn:or3(  xsn:not3(  xsn:or3(  count( /*:AirspaceCoordinatingMeasureRequest/CoordinationMeasureStatus) = 0 ,  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CoordinationMeasureStatus/CoordinationMeasureStatus))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CoordinationMeasureStatus/CoordinationMeasureStatus) eq "ADD",  string( /*:AirspaceCoordinatingMeasureRequest/CoordinationMeasureStatus/CoordinationMeasureStatus) eq "CHANGE") ) ),  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) != 0  )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[7]F2 EQ /ACM/ ([7S],A[7]F3 EQ /AIRCOR/ | /CA/ | /CL/ | /HIDACZ/ | /NOFLY/ | /ROZ/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in CMID (Set 7) in CMID (Segment 7) lexicographically must equal "ACM" if Field 3 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "AIRCOR" or "CA" or "CL" or "HIDACZ" or "NOFLY" or "ROZ".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "AIRCOR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "HIDACZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "NOFLY",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ROZ")  ),   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) eq "ACM")))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[7]F2 EQ /ADM/ ([7S],A[7]F3 EQ /ADIZ/ | /BDZ/ | /CADA/ | /CONTZN/ | /FEZ/ | /HIMEZ/ | /JEZ/ | /LOMEZ/ | /MEZ/ | /MISARC/ | /SHORADEZ/ | /SL/ | /TL/ | /WFZ/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in CMID (Set 7) in CMID (Segment 7) lexicographically must equal "ADM" if Field 3 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "ADIZ" or "BDZ" or "CADA" or "CONTZN" or "FEZ" or "HIMEZ" or "JEZ" or "LOMEZ" or "MEZ" or "MISARC" or "SHORADEZ" or "SL" or "TL" or "WFZ".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ADIZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "BDZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CADA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CONTZN",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "FEZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "HIMEZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "JEZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "LOMEZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "MEZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "MISARC",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "SHORADEZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "SL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "TL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "WFZ")  ),   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) eq "ADM")))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[7]F2 EQ /ARM/ ([7S],A[7]F3 EQ /ACP/ | /BULL/ | /BZ/ | /CP/ | /IFFOFF/ | /IFFON/ | /SARDOT/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in CMID (Set 7) in CMID (Segment 7) lexicographically must equal "ARM" if Field 3 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "ACP" or "BULL" or "BZ" or "CP" or "IFFOFF" or "IFFON" or "SARDOT".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ACP",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "BULL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "BZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CP",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "IFFOFF",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "IFFON",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "SARDOT")  ),   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) eq "ARM")))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[7]F2 EQ /ATCM/ ([7S],A[7]F3 EQ /ADVRTE/ | /ALERTA/ | /ALTRV/ | /ARWY/ | /CDR/ | /CFA/ | /CLSA/ | /CLSB/ | /CLSC/ | /CLSD/ | /CLSE/ | /CLSF/ | /CLSG/ | /DA/ | /FIR/ | /MOA/ | /PROHIB/ | /RA/ | /TFR/ | /WARN/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in CMID (Set 7) in CMID (Segment 7) lexicographically must equal "ATCM" if Field 3 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "ADVRTE" or "ALERTA" or "ALTRV" or "ARWY" or "CDR" or "CFA" or "CLSA" or "CLSB" or "CLSC" or "CLSD" or "CLSE" or "CLSF" or "CLSG" or "DA" or "FIR" or "MOA" or "PROHIB" or "RA" or "TFR" or "WARN".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ADVRTE",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ALERTA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ALTRV",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ARWY",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CDR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CFA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CLSA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CLSB",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CLSC",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CLSD",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CLSE",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CLSF",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CLSG",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "DA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "FIR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "MOA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "PROHIB",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "RA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "TFR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "WARN")  ),   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) eq "ATCM")))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[7]F2 EQ /FSCM/ ([7S],A[7]F3 EQ /ACA/ | /CFL/ | /FFA/ | /FSCL/ | /KILLBX/ | /NFA/ | /RFA/ | /RFL/ | /ZF/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in CMID (Set 7) in CMID (Segment 7) lexicographically must equal "FSCM" if Field 3 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "ACA" or "CFL" or "FFA" or "FSCL" or "KILLBX" or "NFA" or "RFA" or "RFL" or "ZF".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ACA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CFL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "FFA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "FSCL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "KILLBX",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "NFA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "RFA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "RFL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ZF")  ),   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) eq "FSCM")))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[7]F2 EQ /MCM/ ([7S],A[7]F3 EQ /AOA/ | /BNDRY/ | /FLOT/ | /FSA/ | /JOA/ | /JSOA/ | /PL/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in CMID (Set 7) in CMID (Segment 7) lexicographically must equal "MCM" if Field 3 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "AOA" or "BNDRY" or "FLOT" or "FSA" or "JOA" or "JSOA" or "PL".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "AOA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "BNDRY",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "FLOT",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "FSA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "JOA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "JSOA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "PL")  ),   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) eq "MCM")))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[7]F2 EQ /MDM/ ([7S],A[7]F3 EQ /ADZ/ | /APPCOR/ | /CCZONE/ | /COZ/ | /FADIZ/ | /FIRUB/ | /ISP/ | /ISR/ | /RTF/ | /SAFES/ | /SCZ/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in CMID (Set 7) in CMID (Segment 7) lexicographically must equal "MDM" if Field 3 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "ADZ" or "APPCOR" or "CCZONE" or "COZ" or "FADIZ" or "FIRUB" or "ISP" or "ISR" or "RTF" or "SAFES" or "SCZ".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ADZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "APPCOR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "CCZONE",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "COZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "FADIZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "FIRUB",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ISP",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ISR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "RTF",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "SAFES",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "SCZ")  ),   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmType/*)) eq "MDM")))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[7]F3 EQ /AIRCOR/ ([7S],A[7]F4 EQ /LLTR/ | /MMR/ | /SAAFR/ | /SC/ | /TC/ | /TMRR/ | /TR/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 3 in CMID (Set 7) in CMID (Segment 7) lexicographically must equal "AIRCOR" if Field 4 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "LLTR" or "MRR" or "SAAFR" or "SC" or "TC" or "TMRR" or "TR".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "LLTR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "MMR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "SAAFR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "SC",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "TC",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "TMRR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "TR")  ),   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "AIRCOR")))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[7]F3 EQ /ROZ/ ([7S],A[7]F4 EQ /AAR/ | /ABC/ | /AEW/ | /CAP/ | /CAS/ | /DZ/ | /EC/ | /LZ/ | /PZ/ | /RECCE/ | /SOF/ | /SSM/ | /SSMS/ | /UA/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 3 in CMID (Set 7) in CMID (Segment 7) lexicographically must equal "ROZ" if Field 4 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "AAR" or "ABC" or "AEW" or "CAP" or "CAS" or "DZ" or "EC" or "LZ" or "PZ" or "RECCE" or "SOF" or "SSM" or "SSMS" or "UA".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "AAR",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "ABC",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "AEW",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "CAP",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "CAS",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "DZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "EC",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "LZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "PZ",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "RECCE",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "SOF",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "SSM",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "SSMS",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmUsage/*)) eq "UA")  ),   if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/Cm/*)) eq "ROZ")))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[9] RP ([7S],A[7]F5 EQ /POLYARC/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>POLYARC (Set 9) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "POLYARC" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "POLYARC")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapePolyarc) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapePolyarc) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[10] RP ([7S],A[7]F5 EQ /RADARC/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>RADARC (Set 10) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "RADARC" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "RADARC")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapeRadarc) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapeRadarc) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[11] RP ([7S],A[7]F5 EQ /TRACK/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>AIRTRACK (Set 11) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "TRACK" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "TRACK")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/AirspaceShapeTrack) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/AirspaceShapeTrack) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[12] RP ([7S],A[7]F5 EQ /POLYGON/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>POLYGON (Set 12) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "POLYGON" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "POLYGON")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapePolygon) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapePolygon) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[12]FG,LF1 !EQ [7S],A[12]FG,1F1</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in the last occurrence of the Field Group in POLYGON (Set 12) in CMID (Segment 7) lexicographically must not equal Field 1 in the first occurrence of the Field Group in POLYGON (Set 12) in the same CMID (Segment 7).</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapePolygon/GroupOfFields[last()]/PolygonPoint))) then 'null' else xsn:and3(  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapePolygon/GroupOfFields[1]/PolygonPoint))) then 'null' else string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapePolygon/GroupOfFields[last()]/PolygonPoint) ne string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapePolygon/GroupOfFields[1]/PolygonPoint)))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[13] RP ([7S],A[7]F5 EQ /CIRCLE/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>CIRCLE (Set 13) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "CIRCLE" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "CIRCLE")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapeCircle) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapeCircle) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[14] RP ([7S],A[7]F5 EQ /CORRIDOR/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>CORRIDOR (Set 14) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "CORRIDOR" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "CORRIDOR")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapeCorridor) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapeCorridor) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[15] RP ([7S],A[7]F5 EQ /POINT/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>APOINT (Set 15) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "POINT" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "POINT")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapePoint) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/ShapePoint) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[16] RP ([7S],A[7]F5 EQ /ORBIT/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>AORBIT (Set 16) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "ORBIT" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "ORBIT")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/AirspaceShapeOrbit) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/AirspaceShapeOrbit) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[17] RP ([7S],A[7]F5 EQ /LINE/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>GEOLINE (Set 17) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "LINE" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "LINE")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/GeometricCompositeLine) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/GeometricCompositeLine) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[18] RP ([7S],A[7]F5 EQ /GRID/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>GRIDAREA (Set 18) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "GRID" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "GRID")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/AreaReferenceSystemGrid) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/AreaReferenceSystemGrid) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],A[19] RP ([7S],A[7]F5 EQ /CIRCLE/ | /CORRIDOR/ | /GRID/ | /LINE/ | /ORBIT/ | /POLYARC/ | /POLYGON/ | /POINT/ | /RADARC/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>EFFLEVEL (Set 19) in CMID (Segment 7) is required if Field 5 in CMID (Set 7) in the same CMID (Segment 7) lexicographically equals "CIRCLE" or "CORRIDOR" or "GRID" or "LINE" or "ORBIT" or "POLYARC" or "POLYGON" or "POINT" or "RADARC" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "CIRCLE",  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "CORRIDOR",  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "GRID",  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "LINE",  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "ORBIT",  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "POLYARC",  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "POLYGON",  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "POINT",  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/CoordinationMeasureIdentification/CmShape) eq "RADARC")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/VerticalDimensionOfTheEffectiveLevel) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $A]/VerticalDimensionOfTheEffectiveLevel) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],Z[24]F1 A /PURPOSE/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in GENTEXT (Set 24) in every CMID (Segment 7) is assigned the value "PURPOSE".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $expr_1_1 in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $expr_1_1]/GeneralText_1/TextIndicator))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $expr_1_1]/GeneralText_1/TextIndicator) eq "PURPOSE"))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[7S],Z[25]F1 A /TRANSIT INSTRUCTIONS/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in GENTEXT (Set 25) in every CMID (Segment 7) is assigned the value "TRANSIT INSTRUCTIONS".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]))) then 'null' else xsn:and3( for $expr_1_1 in 1 to count( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification]) return if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $expr_1_1]/GeneralText_2/TextIndicator))) then 'null' else xsn:or3(  string( /*:AirspaceCoordinatingMeasureRequest/CmRequestDetailsSegment[CoordinationMeasureIdentification][ $expr_1_1]/GeneralText_2/TextIndicator) eq "TRANSIT INSTRUCTIONS"))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[27] RP ([3]F10 EQ /CONFIDENTIAL/ | /SECRET/ | /TOP SECRET/ | /RESTRICTED/ | /NATO RESTRICTED/ | /NATO CONFIDENTIAL/ | /NATO SECRET/ | /NATO SECRET-SAVATE/ | /NATO SECRET-AVICULA/ | /COSMIC TOP SECRET/ | /COSMIC TOP SECRET-BOHEMIA/ | /COSMIC TOP SECRET-BALK/ | /COSMIC TOP SECRET ATOMAL/ | /NATO SECRET ATOMAL/ | /NATO CONFIDENTIAL ATOMAL/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>DECL (Set 27) is required if Field 10 in MSGID (SET 3) lexicographically equals "CONFIDENTIAL" or "SECRET" or "TOP SECRET" or "RESTRICTED" or "NATO RESTRICTED" or "NATO CONFIDENTIAL" or "NATO SECRET" or "NATO SECRET-SAVATE" or "NATO SECRET-AVICULA" or "COSMIC TOP SECRET" or "COSMIC TOP SECRET-BOHEMIA" or "COSMIC TOP SECRET-BALK" or "COSMIC TOP SECRET ATOMAL" or "NATO SECRET ATOMAL" or "NATO CONFIDENTIAL ATOMAL" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>for $cond in  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) and not( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "CONFIDENTIAL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "SECRET",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "TOP SECRET",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "RESTRICTED",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO RESTRICTED",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO CONFIDENTIAL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET-SAVATE",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET-AVICULA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET-BOHEMIA",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET-BALK",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET ATOMAL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET ATOMAL",  string( if ( exists( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirspaceCoordinatingMeasureRequest/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO CONFIDENTIAL ATOMAL")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  count( /*:AirspaceCoordinatingMeasureRequest/MessageDowngradingOrDeclassificationData) != 0  else  count( /*:AirspaceCoordinatingMeasureRequest/MessageDowngradingOrDeclassificationData) = 0</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[27]F2 RP ([27]F1 = FF679-4)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in DECL (Set 27) is required if Field 1 in DECL (Set 27) uses alternative ORIGINAL CLASSIFICATION AUTHORITY (FF679-4) otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>for $cond in if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/MessageDowngradingOrDeclassificationData/SourceForClassification))) then 'null' else xsn:or3(  exists( /*:AirspaceCoordinatingMeasureRequest/MessageDowngradingOrDeclassificationData/SourceForClassification/OriginalClassificationAuthority))  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/MessageDowngradingOrDeclassificationData))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/MessageDowngradingOrDeclassificationData/ReasonForClassification) != 0  else  if ( not( exists( /*:AirspaceCoordinatingMeasureRequest/MessageDowngradingOrDeclassificationData))) then 'null' else  count( /*:AirspaceCoordinatingMeasureRequest/MessageDowngradingOrDeclassificationData/ReasonForClassification) = 0</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <VersionIndicator>B.1.02.06</VersionIndicator>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
<xsd:sequence><xsd:choice minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:appinfo>
   <AlternativeType>Mutually Exclusive, None Required</AlternativeType>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:element name="ExerciseIdentification" minOccurs="0" maxOccurs="1">
  <xsd:annotation>
   <xsd:documentation>The EXER set provides the designated code name or nickname, if the message supports an exercise.</xsd:documentation>
   <xsd:appinfo>
    <SetFormatPositionName>EXERCISE IDENTIFICATION</SetFormatPositionName>
    <SetFormatPositionNumber>1</SetFormatPositionNumber>
    <SetFormatPositionConcept>The EXER set provides the designated code name or nickname, if the message supports an exercise.</SetFormatPositionConcept>
    <SetFormatPositionUseDescription />
    <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
    <Repeatability>1</Repeatability>
   </xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="s:ExerciseIdentificationType">
     <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="1" />
     <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>
 <xsd:element name="OperationIdentificationData" minOccurs="0" maxOccurs="1">
  <xsd:annotation>
   <xsd:documentation>The OPER set provides the designated code name or nickname, if the message supports an operation.</xsd:documentation>
   <xsd:appinfo>
    <SetFormatPositionName>OPERATION IDENTIFICATION DATA</SetFormatPositionName>
    <SetFormatPositionNumber>2</SetFormatPositionNumber>
    <SetFormatPositionConcept>The OPER set provides the designated code name or nickname, if the message supports an operation.</SetFormatPositionConcept>
    <SetFormatPositionUseDescription />
    <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
    <Repeatability>1</Repeatability>
   </xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="s:OperationIdentificationDataType">
     <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="2" />
     <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>
</xsd:choice>

<xsd:element name="MessageIdentifier" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The MSGID set provides the message identification and originator.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>MESSAGE IDENTIFIER</SetFormatPositionName>
   <SetFormatPositionNumber>3</SetFormatPositionNumber>
   <SetFormatPositionConcept>The MSGID set provides the message identification and originator.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:MessageIdentifierType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="3" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="Reference" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The REF set provides both USMTF and non-USMTF references.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>REFERENCE</SetFormatPositionName>
   <SetFormatPositionNumber>4</SetFormatPositionNumber>
   <SetFormatPositionConcept>The REF set provides both USMTF and non-USMTF references.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ReferenceType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="4" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="PointOfContactInformation" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The POC set provides POC information at the unit requesting airspace.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>POINT OF CONTACT INFORMATION</SetFormatPositionName>
   <SetFormatPositionNumber>5</SetFormatPositionNumber>
   <SetFormatPositionConcept>The POC set provides POC information at the unit requesting airspace.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:PointOfContactInformationType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="5" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="CoordinationMeasureStatus" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The CMSTAT set identifies whether to add, modify, or delete the coordination measure.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>COORDINATION MEASURE STATUS</SetFormatPositionName>
   <SetFormatPositionNumber>6</SetFormatPositionNumber>
   <SetFormatPositionConcept>The CMSTAT set identifies whether to add, modify, or delete the coordination measure.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:CoordinationMeasureStatusType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="6" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
<xsd:element name="CmRequestDetailsSegment" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The sets CMID through GENTEXT (TRANSIT INSTRUCTIONS) form a CONDITIONAL SEGMENT to request more than one coordination measure.
The Segment beginning with the CMID set is REQUIRED if the CMSTAT set is not used or Field 1 in the CMSTAT set equals "ADD" or "CHANGE".</xsd:documentation>
  <xsd:appinfo>
   <SegmentStructureName>CM REQUEST DETAILS SEGMENT</SegmentStructureName>
   <SegmentStructureConcept />
   <SegmentStructureUseDescription>The sets CMID through GENTEXT (TRANSIT INSTRUCTIONS) form a CONDITIONAL SEGMENT to request more than one coordination measure.
The Segment beginning with the CMID set is REQUIRED if the CMSTAT set is not used or Field 1 in the CMSTAT set equals "ADD" or "CHANGE".</SegmentStructureUseDescription>
   <InitialSetFormatPosition>7</InitialSetFormatPosition>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
   <VersionIndicator />
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
<xsd:sequence>

<xsd:element name="CoordinationMeasureIdentification" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The CMID set defines the spatial type and usage of the coordination measure being requested.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>COORDINATION MEASURE IDENTIFICATION</SetFormatPositionName>
   <SetFormatPositionNumber>7</SetFormatPositionNumber>
   <SetFormatPositionConcept>The CMID set defines the spatial type and usage of the coordination measure being requested.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:CoordinationMeasureIdentificationType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="7" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeodeticDatum" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GEODATUM set identifies the geodetic datum being used in the ACMREQ.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GEODETIC DATUM</SetFormatPositionName>
   <SetFormatPositionNumber>8</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GEODATUM set identifies the geodetic datum being used in the ACMREQ.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeodeticDatumType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="8" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="ShapePolyarc" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The POLYARC set defines a polygon and arc shaped airspace.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>SHAPE POLYARC</SetFormatPositionName>
   <SetFormatPositionNumber>9</SetFormatPositionNumber>
   <SetFormatPositionConcept>The POLYARC set defines a polygon and arc shaped airspace.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The POLYARC set is REQUIRED if Field 5 of the CMID set equals "POLYARC", otherwise the POLYARC set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ShapePolyarcType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="9" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="ShapeRadarc" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The RADARC set defines a radial and arc shaped airspace.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>SHAPE RADARC</SetFormatPositionName>
   <SetFormatPositionNumber>10</SetFormatPositionNumber>
   <SetFormatPositionConcept>The RADARC set defines a radial and arc shaped airspace.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The RADARC set is REQUIRED if Field 5 of the CMID set equals "RADARC", otherwise the RADARC set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ShapeRadarcType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="10" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="AirspaceShapeTrack" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The AIRTRACK set defines a track shaped airspace.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>AIRSPACE SHAPE TRACK</SetFormatPositionName>
   <SetFormatPositionNumber>11</SetFormatPositionNumber>
   <SetFormatPositionConcept>The AIRTRACK set defines a track shaped airspace.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The AIRTRACK set is REQUIRED if Field 5 of the CMID set equals "TRACK", otherwise the AIRTRACK set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AirspaceShapeTrackType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="11" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="ShapePolygon" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The POLYGON set defines a polygon shaped airspace.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>SHAPE POLYGON</SetFormatPositionName>
   <SetFormatPositionNumber>12</SetFormatPositionNumber>
   <SetFormatPositionConcept>The POLYGON set defines a polygon shaped airspace.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The POLYGON set is REQUIRED if Field 5 of the CMID set equals "POLYGON", otherwise the POLYGON set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ShapePolygonType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="12" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="ShapeCircle" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The CIRCLE set defines a circular shaped airspace.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>SHAPE CIRCLE</SetFormatPositionName>
   <SetFormatPositionNumber>13</SetFormatPositionNumber>
   <SetFormatPositionConcept>The CIRCLE set defines a circular shaped airspace.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The CIRCLE set is REQUIRED if Field 5 of the CMID set equals "CIRCLE", otherwise the CIRCLE set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ShapeCircleType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="13" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="ShapeCorridor" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The CORRIDOR set defines an airspace used as a corridor.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>SHAPE CORRIDOR</SetFormatPositionName>
   <SetFormatPositionNumber>14</SetFormatPositionNumber>
   <SetFormatPositionConcept>The CORRIDOR set defines an airspace used as a corridor.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The CORRIDOR set is REQUIRED if Field 5 of the CMID set equals "CORRIDOR", otherwise the CORRIDOR set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ShapeCorridorType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="14" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="ShapePoint" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The APOINT set defines an airspace that is a single point.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>SHAPE POINT</SetFormatPositionName>
   <SetFormatPositionNumber>15</SetFormatPositionNumber>
   <SetFormatPositionConcept>The APOINT set defines an airspace that is a single point.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The APOINT set is REQUIRED if Field 5 of the CMID set equals "POINT", otherwise the APOINT set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ShapePointType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="15" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="AirspaceShapeOrbit" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The AORBIT set defines an airspace that is an orbit.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>AIRSPACE SHAPE ORBIT</SetFormatPositionName>
   <SetFormatPositionNumber>16</SetFormatPositionNumber>
   <SetFormatPositionConcept>The AORBIT set defines an airspace that is an orbit.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The AORBIT set is REQUIRED if Field 5 of the CMID set equals "ORBIT", otherwise the AORBIT set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AirspaceShapeOrbitType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="16" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeometricCompositeLine" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GEOLINE set defines a single line that defines an airspace.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GEOMETRIC COMPOSITE LINE</SetFormatPositionName>
   <SetFormatPositionNumber>17</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GEOLINE set defines a single line that defines an airspace.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The GEOLINE set is REQUIRED if Field 5 of the CMID set equals "LINE", otherwise the GEOLINE set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeometricCompositeLineType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="17" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="AreaReferenceSystemGrid" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GRIDAREA set defines an airspace using a Global Area Reference System (GARS) grid or other commander directed area reference system grid. NOTE: The non-GARS area reference system should be identified in Field 2 of the corresponding GEODATUM set.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>AREA REFERENCE SYSTEM GRID</SetFormatPositionName>
   <SetFormatPositionNumber>18</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GRIDAREA set defines an airspace using a Global Area Reference System (GARS) grid or other commander directed area reference system grid. NOTE: The non-GARS area reference system should be identified in Field 2 of the corresponding GEODATUM set.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The GRIDAREA set is REQUIRED if Field 5 of the CMID set equals "GRID", otherwise the GRIDAREA set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AreaReferenceSystemGridType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="18" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="VerticalDimensionOfTheEffectiveLevel" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The EFFLEVEL set defines the vertical dimensions of the requested coordination measure.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>VERTICAL DIMENSION OF THE EFFECTIVE LEVEL</SetFormatPositionName>
   <SetFormatPositionNumber>19</SetFormatPositionNumber>
   <SetFormatPositionConcept>The EFFLEVEL set defines the vertical dimensions of the requested coordination measure.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The EFFLEVEL set is REQUIRED if Field 5 of the CMID set equals "CIRCLE", "CORRIDOR", "GRID", "LINE", "ORBIT", "POINT", "POLYARC", "POLYGON", or "RADARC", otherwise the EFFLEVEL set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:VerticalDimensionOfTheEffectiveLevelType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="19" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="PeriodOfTime" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The PERIOD set describes the effective time of a discrete (fixed) coordination measure.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>PERIOD OF TIME</SetFormatPositionName>
   <SetFormatPositionNumber>20</SetFormatPositionNumber>
   <SetFormatPositionConcept>The PERIOD set describes the effective time of a discrete (fixed) coordination measure.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:PeriodOfTimeType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="20" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="RepeatingTimePeriod" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The RPERIOD set describes the effective time of a repeating coordination measure.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>REPEATING TIME PERIOD</SetFormatPositionName>
   <SetFormatPositionNumber>21</SetFormatPositionNumber>
   <SetFormatPositionConcept>The RPERIOD set describes the effective time of a repeating coordination measure.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:RepeatingTimePeriodType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="21" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="ControlPoint" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The CNTRLPT set describes any reference, controlling, or rendezvous point for a given coordination measure.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>CONTROL POINT</SetFormatPositionName>
   <SetFormatPositionNumber>22</SetFormatPositionNumber>
   <SetFormatPositionConcept>The CNTRLPT set describes any reference, controlling, or rendezvous point for a given coordination measure.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ControlPointType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="22" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="ControllingAuthority" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The CONTAUTH set identifies the agency or unit that will control the coordination measure.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>CONTROLLING AUTHORITY</SetFormatPositionName>
   <SetFormatPositionNumber>23</SetFormatPositionNumber>
   <SetFormatPositionConcept>The CONTAUTH set identifies the agency or unit that will control the coordination measure.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ControllingAuthorityType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="23" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeneralText_1" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GENTEXT/PURPOSE set provides the purpose for the requested coordination measure.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GENERAL TEXT</SetFormatPositionName>
   <SetFormatPositionNumber>24</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GENTEXT/PURPOSE set provides the purpose for the requested coordination measure.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>Field 1 of the GENTEXT set must equal "PURPOSE".</SetFormatPositionUseDescription>
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeneralTextType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="24" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeneralText_2" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GENTEXT/TRANSIT INSTRUCTIONS set provides the transit instructions for the requested coordination measure.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GENERAL TEXT</SetFormatPositionName>
   <SetFormatPositionNumber>25</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GENTEXT/TRANSIT INSTRUCTIONS set provides the transit instructions for the requested coordination measure.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>Field 1 of the GENTEXT set must equal "TRANSIT INSTRUCTIONS".</SetFormatPositionUseDescription>
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeneralTextType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="25" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="segSeq" type="xsd:unsignedShort" fixed="7" /><xsd:attributeGroup ref="ism:SecurityAttributesGroup" /></xsd:complexType>
</xsd:element>

<xsd:element name="UndefinedCoordinatingMeasureLink16TrackNumberReference" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The UNDLKTN set provides the Link-16 reference track number which is used to disseminate new critical coordination measures identified (via Airspace Control Order updates) during the day's operations/period of the ACO to Link-16 users in real-time.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>UNDEFINED COORDINATING MEASURE LINK-16 TRACK NUMBER REFERENCE</SetFormatPositionName>
   <SetFormatPositionNumber>26</SetFormatPositionNumber>
   <SetFormatPositionConcept>The UNDLKTN set provides the Link-16 reference track number which is used to disseminate new critical coordination measures identified (via Airspace Control Order updates) during the day's operations/period of the ACO to Link-16 users in real-time.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:UndefinedCoordinatingMeasureLink16TrackNumberReferenceType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="26" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="Remarks" minOccurs="0" maxOccurs="1">
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:RemarksType">
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
<xsd:element name="MessageDowngradingOrDeclassificationData" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The DECL set provides declassification or downgrading instructions, if the message is classified.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>MESSAGE DOWNGRADING OR DECLASSIFICATION DATA</SetFormatPositionName>
   <SetFormatPositionNumber>27</SetFormatPositionNumber>
   <SetFormatPositionConcept>The DECL set provides declassification or downgrading instructions, if the message is classified.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The DECL set is REQUIRED if Field 10 in the MSGID set lexicographically equals "CONFIDENTIAL" or "SECRET" or "TOP SECRET" or "RESTRICTED" or "NATO RESTRICTED" or "NATO CONFIDENTIAL" or "NATO SECRET" or "NATO SECRET-SAVATE" or "NATO SECRET-AVICULA" or "COSMIC TOP SECRET" or "COSMIC TOP SECRET-BOHEMIA" or "COSMIC TOP SECRET-BALK" or "COSMIC TOP SECRET ATOMAL" or "NATO SECRET ATOMAL" or "NATO CONFIDENTIAL ATOMAL", otherwise the DECL set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:MessageDowngradingOrDeclassificationDataType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="27" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element></xsd:sequence>
<xsd:attribute name="mtfid" type="xsd:string" fixed="ACMREQ" /><xsd:attributeGroup ref="ism:SecurityAttributesGroup" /></xsd:complexType>
</xsd:element></xsd:schema>