<?xml version="1.0" ?> 
<xsd:schema targetNamespace="urn:mtf:mil:6040b:acsamstat:B.1.01.15" xml:lang="en-US" xmlns="urn:mtf:mil:6040b:acsamstat:B.1.01.15" xmlns:s="urn:mtf:mil:6040b:acsamstat:B.1.01.15:set" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ism="urn:us:gov:ic:ism:v2" xmlns:ddms="http://metadata.dod.mil/mdr/ns/DDMS/2.0/" xmlns:ICISM="urn:us:gov:ic:ism:v2" elementFormDefault="unqualified" attributeFormDefault="unqualified">
 <xsd:import namespace="urn:mtf:mil:6040b:acsamstat:B.1.01.15:set" schemaLocation="sets.xsd" />
 <xsd:import namespace="urn:us:gov:ic:ism:v2" schemaLocation="IC-ISM-v2.xsd" />
 <xsd:annotation>
  <xsd:appinfo>
   <ddms:security ICISM:classification="U" ICISM:ownerProducer="USA" ICISM:nonICmarkings="DIST_STMT_C" />
  </xsd:appinfo>
  <xsd:appinfo>DISTRIBUTION STATEMENT C. Distribution authorized to U.S. Government Agencies and their contractors only for administrative or operational use. Other requests for this document shall be referred to Defense Information Systems Agency Interoperability Directorate. WARNING - This document contains technical data whose export is restricted by the Arms Export Control Act (Title 22, U.S.C., Sec. 2751) or the Export Administration Act of 1979, as amended, Title 50, U.S.C., App. 2401. Violations of these export laws are subject to severe criminal penalties.  Disseminate in accordance with provisions of DOD Directive 5230.25.</xsd:appinfo>
 </xsd:annotation><xsd:element name="AlertAircraftSamStatusReport">
 <xsd:annotation>
  <xsd:documentation>The ACSAMSTAT is used to report the availability and alert status of air defense aircraft and/or Surface-to-Air Missiles (SAM) for the management of the Joint Operational Area (JOA) air defense by the Area Air Defense Commander (AADC). IT IS TRANSMITTED BY RECORD ONLY.</xsd:documentation>
  <xsd:appinfo>
   <MtfName>ALERT AIRCRAFT/SAM STATUS REPORT</MtfName>
   <MtfIdentifier>ACSAMSTAT</MtfIdentifier>
   <MtfIndexReferenceNumber>B705</MtfIndexReferenceNumber>
   <MtfSponsor>USAF/USA</MtfSponsor>
   <MtfPurpose>The ACSAMSTAT is used to report the availability and alert status of air defense aircraft and/or Surface-to-Air Missiles (SAM) for the management of the Joint Operational Area (JOA) air defense by the Area Air Defense Commander (AADC). IT IS TRANSMITTED BY RECORD ONLY.</MtfPurpose>
   <MtfRelatedDocument>NONE</MtfRelatedDocument>
   <MtfRemark>B.1.01.14 was updated by ICP M2017-04, which updated the REF Set.</MtfRemark>
   <MtfNote>The ACSAMSTAT is transmitted to all the committed forces prior to the effective alert period. After the initial message is sent, only status updates referencing the mission number for the aircraft and the unit identification for SAMs are sent. The ACSAMSTAT is transmitted by record only. To transmit the information in this message by voice, the originator must use the SAM Status Report (SAMREP) for SAM status reporting and the Defensive Aircraft Status Report (DACREP) for alert status of defensive aircraft reporting.</MtfNote>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[3]F1 A /ACSAMSTAT/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in MSGID (Set 3) is assigned the value "ACSAMSTAT".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageTextFormatIdentifier))) then 'null' else xsn:or3(  string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageTextFormatIdentifier) eq "ACSAMSTAT")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[3]F2 A /MIL-STD-6040(SERIES)/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in MSGID (Set 3) is assigned the value "MIL-STD-6040(SERIES)".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/StandardOfMessageTextFormat))) then 'null' else xsn:or3(  string( /*:AlertAircraftSamStatusReport/MessageIdentifier/StandardOfMessageTextFormat) eq "MIL-STD-6040(SERIES)")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[3]F3 A /B.1.01.15/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 3 in MSGID (Set 3) is assigned the value "B.1.01.15".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/VersionOfMessageTextFormat))) then 'null' else xsn:or3(  string( /*:AlertAircraftSamStatusReport/MessageIdentifier/VersionOfMessageTextFormat) eq "B.1.01.15")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[4],AF3 R ([4],AF2 EQ /CHT/ | /DOC/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 3 in REF (Set 4) is required if Field 2 in the same REF (Set 4) lexicographically equals "CHT" or "DOC".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AlertAircraftSamStatusReport/Reference))) then 'null' else xsn:and3( for $A in 1 to count( /*:AlertAircraftSamStatusReport/Reference) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AlertAircraftSamStatusReport/Reference[ $A]/CommunicationType/*)) and not( exists( /*:AlertAircraftSamStatusReport/Reference[ $A]/CommunicationType/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AlertAircraftSamStatusReport/Reference[ $A]/CommunicationType/*/*)) then string-join( /*:AlertAircraftSamStatusReport/Reference[ $A]/CommunicationType/*/*,"") else string( /*:AlertAircraftSamStatusReport/Reference[ $A]/CommunicationType/*)) eq "CHT",  string( if ( exists( /*:AlertAircraftSamStatusReport/Reference[ $A]/CommunicationType/*/*)) then string-join( /*:AlertAircraftSamStatusReport/Reference[ $A]/CommunicationType/*/*,"") else string( /*:AlertAircraftSamStatusReport/Reference[ $A]/CommunicationType/*)) eq "DOC")),  if ( not( exists( /*:AlertAircraftSamStatusReport/Reference[ $A]))) then 'null' else  count( /*:AlertAircraftSamStatusReport/Reference[ $A]/InformationProduct) != 0  ))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[8]F1 A /ACSIGN/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in GENTEXT (Set 8) is assigned the value "ACSIGN".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AlertAircraftSamStatusReport/GeneralText_1/TextIndicator))) then 'null' else xsn:or3(  string( /*:AlertAircraftSamStatusReport/GeneralText_1/TextIndicator) eq "ACSIGN")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[10]F1 A /ACSIGN/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in GENTEXT (Set 10) is assigned the value "ACSIGN".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AlertAircraftSamStatusReport/GeneralText_2/TextIndicator))) then 'null' else xsn:or3(  string( /*:AlertAircraftSamStatusReport/GeneralText_2/TextIndicator) eq "ACSIGN")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12]F1 A /ACSIGN/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in GENTEXT (Set 12) is assigned the value "ACSIGN".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AlertAircraftSamStatusReport/GeneralText_3/TextIndicator))) then 'null' else xsn:or3(  string( /*:AlertAircraftSamStatusReport/GeneralText_3/TextIndicator) eq "ACSIGN")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[14] P ([13] !@)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>7UNITLOC (Set 14) is prohibited if 7SAMSTAT (Set 13) does not occur.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>xsn:or3(  xsn:not3(  count( /*:AlertAircraftSamStatusReport/SurfaceToAirUnitStatusInformation) = 0  ),  count( /*:AlertAircraftSamStatusReport/UnitLocationInformation) = 0  )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[14]FG,NF1 EQ [13]FG,NF1</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in at least one occurrence of the Field Group in 7UNITLOC (Set 14) lexicographically equals Field 1 in at least one occurrence of the Field Group in 7SAMSTAT (Set 13).</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AlertAircraftSamStatusReport/UnitLocationInformation/GroupOfFields))) then 'null' else xsn:or3( for $expr_1_1 in 1 to count( /*:AlertAircraftSamStatusReport/UnitLocationInformation/GroupOfFields) return if ( not( exists( /*:AlertAircraftSamStatusReport/UnitLocationInformation/GroupOfFields[ $expr_1_1]/DataEntry))) then 'null' else xsn:or3(  if ( not( exists( /*:AlertAircraftSamStatusReport/SurfaceToAirUnitStatusInformation/GroupOfFields))) then 'null' else xsn:or3( for $expr1_op1_1 in 1 to count( /*:AlertAircraftSamStatusReport/SurfaceToAirUnitStatusInformation/GroupOfFields) return if ( not( exists( /*:AlertAircraftSamStatusReport/SurfaceToAirUnitStatusInformation/GroupOfFields[ $expr1_op1_1]/DataEntry))) then 'null' else string( /*:AlertAircraftSamStatusReport/UnitLocationInformation/GroupOfFields[ $expr_1_1]/DataEntry) eq string( /*:AlertAircraftSamStatusReport/SurfaceToAirUnitStatusInformation/GroupOfFields[ $expr1_op1_1]/DataEntry))))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[16] RP ([3]F10 EQ /CONFIDENTIAL/ | /SECRET/ | /TOP SECRET/ | /RESTRICTED/ | /NATO RESTRICTED/ | /NATO CONFIDENTIAL/ | /NATO SECRET/ | /NATO SECRET-SAVATE/ | /NATO SECRET-AVICULA/ | /COSMIC TOP SECRET/ | /COSMIC TOP SECRET-BOHEMIA/ | /COSMIC TOP SECRET-BALK/ | /COSMIC TOP SECRET ATOMAL/ | /NATO SECRET ATOMAL/ | /NATO CONFIDENTIAL ATOMAL/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>DECL (Set 16) is required if Field 10 in MSGID (SET 3) lexicographically equals "CONFIDENTIAL" or "SECRET" or "TOP SECRET" or "RESTRICTED" or "NATO RESTRICTED" or "NATO CONFIDENTIAL" or "NATO SECRET" or "NATO SECRET-SAVATE" or "NATO SECRET-AVICULA" or "COSMIC TOP SECRET" or "COSMIC TOP SECRET-BOHEMIA" or "COSMIC TOP SECRET-BALK" or "COSMIC TOP SECRET ATOMAL" or "NATO SECRET ATOMAL" or "NATO CONFIDENTIAL ATOMAL" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>for $cond in  if ( not( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) and not( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "CONFIDENTIAL",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "SECRET",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "TOP SECRET",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "RESTRICTED",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO RESTRICTED",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO CONFIDENTIAL",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET-SAVATE",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET-AVICULA",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET-BOHEMIA",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET-BALK",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET ATOMAL",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET ATOMAL",  string( if ( exists( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AlertAircraftSamStatusReport/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO CONFIDENTIAL ATOMAL")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  count( /*:AlertAircraftSamStatusReport/MessageDowngradingOrDeclassificationData) != 0  else  count( /*:AlertAircraftSamStatusReport/MessageDowngradingOrDeclassificationData) = 0</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[16]F2 RP ([16]F1 = FF679-4)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in DECL (Set 16) is required if Field 1 in DECL (Set 16) uses alternative ORIGINAL CLASSIFICATION AUTHORITY (FF679-4) otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>for $cond in if ( not( exists( /*:AlertAircraftSamStatusReport/MessageDowngradingOrDeclassificationData/SourceForClassification))) then 'null' else xsn:or3(  exists( /*:AlertAircraftSamStatusReport/MessageDowngradingOrDeclassificationData/SourceForClassification/OriginalClassificationAuthority))  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AlertAircraftSamStatusReport/MessageDowngradingOrDeclassificationData))) then 'null' else  count( /*:AlertAircraftSamStatusReport/MessageDowngradingOrDeclassificationData/ReasonForClassification) != 0  else  if ( not( exists( /*:AlertAircraftSamStatusReport/MessageDowngradingOrDeclassificationData))) then 'null' else  count( /*:AlertAircraftSamStatusReport/MessageDowngradingOrDeclassificationData/ReasonForClassification) = 0</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <VersionIndicator>B.1.01.15</VersionIndicator>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
<xsd:sequence><xsd:choice minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:appinfo>
   <AlternativeType>Mutually Exclusive, None Required</AlternativeType>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:element name="ExerciseIdentification" minOccurs="0" maxOccurs="1">
  <xsd:annotation>
   <xsd:documentation>The EXER set provides the designated code name or nickname, if the message supports an exercise.</xsd:documentation>
   <xsd:appinfo>
    <SetFormatPositionName>EXERCISE IDENTIFICATION</SetFormatPositionName>
    <SetFormatPositionNumber>1</SetFormatPositionNumber>
    <SetFormatPositionConcept>The EXER set provides the designated code name or nickname, if the message supports an exercise.</SetFormatPositionConcept>
    <SetFormatPositionUseDescription />
    <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
    <Repeatability>1</Repeatability>
   </xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="s:ExerciseIdentificationType">
     <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="1" />
     <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>
 <xsd:element name="OperationIdentificationData" minOccurs="0" maxOccurs="1">
  <xsd:annotation>
   <xsd:documentation>The OPER set provides the designated code name or nickname, if the message supports an operation.</xsd:documentation>
   <xsd:appinfo>
    <SetFormatPositionName>OPERATION IDENTIFICATION DATA</SetFormatPositionName>
    <SetFormatPositionNumber>2</SetFormatPositionNumber>
    <SetFormatPositionConcept>The OPER set provides the designated code name or nickname, if the message supports an operation.</SetFormatPositionConcept>
    <SetFormatPositionUseDescription />
    <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
    <Repeatability>1</Repeatability>
   </xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="s:OperationIdentificationDataType">
     <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="2" />
     <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>
</xsd:choice>

<xsd:element name="MessageIdentifier" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The MSGID set provides the message identification and originator.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>MESSAGE IDENTIFIER</SetFormatPositionName>
   <SetFormatPositionNumber>3</SetFormatPositionNumber>
   <SetFormatPositionConcept>The MSGID set provides the message identification and originator.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:MessageIdentifierType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="3" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="Reference" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The REF set provides both USMTF and non-USMTF references.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>REFERENCE</SetFormatPositionName>
   <SetFormatPositionNumber>4</SetFormatPositionNumber>
   <SetFormatPositionConcept>The REF set provides both USMTF and non-USMTF references.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ReferenceType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="4" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="MessageCancellationWithNewInformationProvided" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The CANX set cancels the ACSAMSTAT message and provides new information. If a facility wants to cancel a message and not provide new information, the MSGCORRCANX message should be used.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>MESSAGE CANCELLATION WITH NEW INFORMATION PROVIDED</SetFormatPositionName>
   <SetFormatPositionNumber>5</SetFormatPositionNumber>
   <SetFormatPositionConcept>The CANX set cancels the ACSAMSTAT message and provides new information. If a facility wants to cancel a message and not provide new information, the MSGCORRCANX message should be used.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:MessageCancellationWithNewInformationProvidedType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="5" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="EffectiveDayTimePeriod" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The PERID set specifies the time period of the report.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>EFFECTIVE DAY-TIME PERIOD</SetFormatPositionName>
   <SetFormatPositionNumber>6</SetFormatPositionNumber>
   <SetFormatPositionConcept>The PERID set specifies the time period of the report.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:EffectiveDayTimePeriodType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="6" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="AirAlertMissionBasicInformation" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The AIRALERT set reports the status of air defense aircraft on airborne alert.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>AIR ALERT MISSION BASIC INFORMATION</SetFormatPositionName>
   <SetFormatPositionNumber>7</SetFormatPositionNumber>
   <SetFormatPositionConcept>The AIRALERT set reports the status of air defense aircraft on airborne alert.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AirAlertMissionBasicInformationType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="7" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeneralText_1" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GENTEXT/ACSIGN set provides additional airborne aircraft call signs.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GENERAL TEXT</SetFormatPositionName>
   <SetFormatPositionNumber>8</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GENTEXT/ACSIGN set provides additional airborne aircraft call signs.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>Field 1 of the GENTEXT set must equal "ACSIGN".</SetFormatPositionUseDescription>
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeneralTextType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="8" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="AircraftGroundAlertMissionBasicInformation" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The 7GNDALRT set reports the status of air defense aircraft on ground alert.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>AIRCRAFT GROUND ALERT MISSION, BASIC INFORMATION</SetFormatPositionName>
   <SetFormatPositionNumber>9</SetFormatPositionNumber>
   <SetFormatPositionConcept>The 7GNDALRT set reports the status of air defense aircraft on ground alert.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AircraftGroundAlertMissionBasicInformationType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="9" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeneralText_2" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GENTEXT/ACSIGN set provides additional ground alert aircraft call signs.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GENERAL TEXT</SetFormatPositionName>
   <SetFormatPositionNumber>10</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GENTEXT/ACSIGN set provides additional ground alert aircraft call signs.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>Field 1 of the GENTEXT set must equal "ACSIGN".</SetFormatPositionUseDescription>
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeneralTextType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="10" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="AircraftShipAlertMissionBasicInformation" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The SHPALERT set identifies ships with assigned alert aircraft on board and the alert status of such aircraft.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>AIRCRAFT SHIP ALERT MISSION BASIC INFORMATION</SetFormatPositionName>
   <SetFormatPositionNumber>11</SetFormatPositionNumber>
   <SetFormatPositionConcept>The SHPALERT set identifies ships with assigned alert aircraft on board and the alert status of such aircraft.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AircraftShipAlertMissionBasicInformationType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="11" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeneralText_3" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GENTEXT/ACSIGN set provides additional shipborne alert aircraft call signs.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GENERAL TEXT</SetFormatPositionName>
   <SetFormatPositionNumber>12</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GENTEXT/ACSIGN set provides additional shipborne alert aircraft call signs.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>Field 1 of the GENTEXT set must equal "ACSIGN".</SetFormatPositionUseDescription>
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeneralTextType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="12" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="SurfaceToAirUnitStatusInformation" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The 7SAMSTAT set reports surface-to-air missile status.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>SURFACE-TO-AIR UNIT STATUS INFORMATION</SetFormatPositionName>
   <SetFormatPositionNumber>13</SetFormatPositionNumber>
   <SetFormatPositionConcept>The 7SAMSTAT set reports surface-to-air missile status.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:SurfaceToAirUnitStatusInformationType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="13" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="UnitLocationInformation" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The 7UNITLOC set identifies the termination of a Surface-to-Air Missile (SAM) operation and the move of the unit to a new location.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>UNIT LOCATION INFORMATION</SetFormatPositionName>
   <SetFormatPositionNumber>14</SetFormatPositionNumber>
   <SetFormatPositionConcept>The 7UNITLOC set identifies the termination of a Surface-to-Air Missile (SAM) operation and the move of the unit to a new location.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The 7UNITLOC set is PROHIBITED if the 7SAMSTAT set is not used.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:UnitLocationInformationType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="14" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="Acknowledge" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The AKNLDG set provides operator acknowledgment and not communications center acknowledgment.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>ACKNOWLEDGE</SetFormatPositionName>
   <SetFormatPositionNumber>15</SetFormatPositionNumber>
   <SetFormatPositionConcept>The AKNLDG set provides operator acknowledgment and not communications center acknowledgment.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AcknowledgeType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="15" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="Remarks" minOccurs="0" maxOccurs="1">
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:RemarksType">
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
<xsd:element name="MessageDowngradingOrDeclassificationData" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The DECL set provides declassification or downgrading instructions, if the message is classified.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>MESSAGE DOWNGRADING OR DECLASSIFICATION DATA</SetFormatPositionName>
   <SetFormatPositionNumber>16</SetFormatPositionNumber>
   <SetFormatPositionConcept>The DECL set provides declassification or downgrading instructions, if the message is classified.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The DECL set is REQUIRED if Field 10 in the MSGID set lexicographically equals "CONFIDENTIAL" or "SECRET" or "TOP SECRET" or "RESTRICTED" or "NATO RESTRICTED" or "NATO CONFIDENTIAL" or "NATO SECRET" or "NATO SECRET-SAVATE" or "NATO SECRET-AVICULA" or "COSMIC TOP SECRET" or "COSMIC TOP SECRET-BOHEMIA" or "COSMIC TOP SECRET-BALK" or "COSMIC TOP SECRET ATOMAL" or "NATO SECRET ATOMAL" or "NATO CONFIDENTIAL ATOMAL", otherwise the DECL set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:MessageDowngradingOrDeclassificationDataType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="16" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element></xsd:sequence>
<xsd:attribute name="mtfid" type="xsd:string" fixed="ACSAMSTAT" /><xsd:attributeGroup ref="ism:SecurityAttributesGroup" /></xsd:complexType>
</xsd:element></xsd:schema>