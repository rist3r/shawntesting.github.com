<?xml version="1.0" ?> 
<xsd:schema targetNamespace="urn:mtf:mil:6040b:aod:B.1.01.04" xml:lang="en-US" xmlns="urn:mtf:mil:6040b:aod:B.1.01.04" xmlns:s="urn:mtf:mil:6040b:aod:B.1.01.04:set" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ism="urn:us:gov:ic:ism:v2" xmlns:ddms="http://metadata.dod.mil/mdr/ns/DDMS/2.0/" xmlns:ICISM="urn:us:gov:ic:ism:v2" elementFormDefault="unqualified" attributeFormDefault="unqualified">
 <xsd:import namespace="urn:mtf:mil:6040b:aod:B.1.01.04:set" schemaLocation="sets.xsd" />
 <xsd:import namespace="urn:us:gov:ic:ism:v2" schemaLocation="IC-ISM-v2.xsd" />
 <xsd:annotation>
  <xsd:appinfo>
   <ddms:security ICISM:classification="U" ICISM:ownerProducer="USA" ICISM:nonICmarkings="DIST_STMT_C" />
  </xsd:appinfo>
  <xsd:appinfo>DISTRIBUTION STATEMENT C. Distribution authorized to U.S. Government Agencies and their contractors only for administrative or operational use. Other requests for this document shall be referred to Defense Information Systems Agency Interoperability Directorate. WARNING - This document contains technical data whose export is restricted by the Arms Export Control Act (Title 22, U.S.C., Sec. 2751) or the Export Administration Act of 1979, as amended, Title 50, U.S.C., App. 2401. Violations of these export laws are subject to severe criminal penalties.  Disseminate in accordance with provisions of DOD Directive 5230.25.</xsd:appinfo>
 </xsd:annotation><xsd:element name="AirOperationsDirective">
 <xsd:annotation>
  <xsd:documentation>The AOD is used to provide the Joint Force Air Component Commander's written guidance which ensures air, space, and cyberspace operations effectively support the combined/joint force objectives while retaining enough flexibility to adjust to the dynamics of the range of and phases of military operations. The AOD provides operational objectives, effects, and tasks as well as their measures of effectiveness/performance for the ATO execution.</xsd:documentation>
  <xsd:appinfo>
   <MtfName>AIR OPERATIONS DIRECTIVE</MtfName>
   <MtfIdentifier>AOD</MtfIdentifier>
   <MtfIndexReferenceNumber>F072</MtfIndexReferenceNumber>
   <MtfSponsor>USAF</MtfSponsor>
   <MtfPurpose>The AOD is used to provide the Joint Force Air Component Commander's written guidance which ensures air, space, and cyberspace operations effectively support the combined/joint force objectives while retaining enough flexibility to adjust to the dynamics of the range of and phases of military operations. The AOD provides operational objectives, effects, and tasks as well as their measures of effectiveness/performance for the ATO execution.</MtfPurpose>
   <MtfRelatedDocument>JP 3-30, AFI13-1AOCV3, AFTTP 3-3.AOC</MtfRelatedDocument>
   <MtfRemark>B.1.01.03 was updated by ICP M2017-04, which updated the ALLOCATED AOC SEGMENT (ALLACFT Set, ALLASACS Set, ALLGBAD Set, and AOCID Set), PRIORITIZED DEFENDED ASSET LIST SEGMENT (PDAL Set), PRIORITIZED TGT LIST SEGMENT (TGTDESIG Set), POC Set, and REF Set.</MtfRemark>
   <MtfNote>The AOD is an extension of the Joint Air Operations Plan (JAOP) and provides written guidance to subordinates units and teams within the Air and Space Operations Center (AOC) to ensure the associated Air Tasking Order (ATO) supports Joint Force Commander (JFC) objectives. AOD guidance should be flexible enough to allow the AOC to adjust to dynamics of military operations, yet specific enough to clearly describe JFACC intent. AOD formats should be tailored to JFACC preferences, the nature of air and space operations supported by a particular AOC and component and tasked unit needs.</MtfNote>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[3]F1 A /AOD/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in MSGID (Set 3) is assigned the value "AOD".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/MessageIdentifier/MessageTextFormatIdentifier))) then 'null' else xsn:or3(  string( /*:AirOperationsDirective/MessageIdentifier/MessageTextFormatIdentifier) eq "AOD")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[3]F2 A /MIL-STD-6040(SERIES)/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in MSGID (Set 3) is assigned the value "MIL-STD-6040(SERIES)".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/MessageIdentifier/StandardOfMessageTextFormat))) then 'null' else xsn:or3(  string( /*:AirOperationsDirective/MessageIdentifier/StandardOfMessageTextFormat) eq "MIL-STD-6040(SERIES)")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[3]F3 A /B.1.01.04/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 3 in MSGID (Set 3) is assigned the value "B.1.01.04".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/MessageIdentifier/VersionOfMessageTextFormat))) then 'null' else xsn:or3(  string( /*:AirOperationsDirective/MessageIdentifier/VersionOfMessageTextFormat) eq "B.1.01.04")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[4],AF3 R ([4],AF2 EQ /CHT/ | /DOC/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 3 in REF (Set 4) is required if Field 2 in the same REF (Set 4) lexicographically equals "CHT" or "DOC".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/Reference))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/Reference) return xsn:or3(  xsn:not3(   if ( not( exists( /*:AirOperationsDirective/Reference[ $A]/CommunicationType/*)) and not( exists( /*:AirOperationsDirective/Reference[ $A]/CommunicationType/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirOperationsDirective/Reference[ $A]/CommunicationType/*/*)) then string-join( /*:AirOperationsDirective/Reference[ $A]/CommunicationType/*/*,"") else string( /*:AirOperationsDirective/Reference[ $A]/CommunicationType/*)) eq "CHT",  string( if ( exists( /*:AirOperationsDirective/Reference[ $A]/CommunicationType/*/*)) then string-join( /*:AirOperationsDirective/Reference[ $A]/CommunicationType/*/*,"") else string( /*:AirOperationsDirective/Reference[ $A]/CommunicationType/*)) eq "DOC")),  if ( not( exists( /*:AirOperationsDirective/Reference[ $A]))) then 'null' else  count( /*:AirOperationsDirective/Reference[ $A]/InformationProduct) != 0  ))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[8]F1 A /COMMANDERS COMMENTS/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in GENTEXT (Set 8) is assigned the value "COMMANDERS COMMENTS".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/GeneralText_1/TextIndicator))) then 'null' else xsn:or3(  string( /*:AirOperationsDirective/GeneralText_1/TextIndicator) eq "COMMANDERS COMMENTS")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[9]F1 A /DIRECTIVE AND GUIDANCE/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in GENTEXT (Set 9) is assigned the value "DIRECTIVE AND GUIDANCE".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/GeneralText_2/TextIndicator))) then 'null' else xsn:or3(  string( /*:AirOperationsDirective/GeneralText_2/TextIndicator) eq "DIRECTIVE AND GUIDANCE")</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],Z[13]F1 A /AOC DIRECTIVE AND GUIDANCE/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 In GENTEXT (Set 13) in every AOCID (Segment 12) is assigned the value "AOC DIRECTIVE AND GUIDANCE".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $expr_1_1 in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $expr_1_1]/GeneralText_3/TextIndicator))) then 'null' else xsn:or3(  string( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $expr_1_1]/GeneralText_3/TextIndicator) eq "AOC DIRECTIVE AND GUIDANCE"))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],Z[14S],Z[18]F1 A /ATTACK LIMITATION/</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 In GENTEXT (Set 18) in every TGTDESIG (Segment 14) in every AOCID (Segment 12) is assigned the value "ATTACK LIMITATION".</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $expr_1_1 in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $expr_1_1]/PrioritizedTgtListSegment[TargetDesignation]))) then 'null' else xsn:and3( for $expr_1_2 in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $expr_1_1]/PrioritizedTgtListSegment[TargetDesignation]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $expr_1_1]/PrioritizedTgtListSegment[TargetDesignation][ $expr_1_2]/GeneralText_4/TextIndicator))) then 'null' else xsn:or3(  string( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $expr_1_1]/PrioritizedTgtListSegment[TargetDesignation][ $expr_1_2]/GeneralText_4/TextIndicator) eq "ATTACK LIMITATION")))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[12]F3 RP ([12S],A[12]F2 EQ /CHANGE/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 3 in AOCID (Set 12) in AOCID (Segment 12) is required is Field 2 in AOCID (Set 12) in the same AOCID (Segment 12) equals "CHANGE", otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return for $cond in if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AnnexIdentification/DocumentIdentifier))) then 'null' else xsn:or3(  string( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AnnexIdentification/DocumentIdentifier) eq "CHANGE")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AnnexIdentification))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AnnexIdentification/ChangeSerialNumber) != 0  else  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AnnexIdentification))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AnnexIdentification/ChangeSerialNumber) = 0 )</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[14S],B[15]F10 RP ([12S],A[14S],B[15]F9 @)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 10 in TGTDATA (Set 15) in TGTDESIG (Segment 14) in AOCID (Segment 12) is required if Field 9 in TGTDATA (Set 15) in the same TGTDESIG (Segment 14) in the same AOCID (Segment 12) occurs, otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]) return for $cond in if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData/DmpiLocation) != 0  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData/ProbableCoordinateHorizontalCircularError) != 0  else  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData/ProbableCoordinateHorizontalCircularError) = 0 ))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[14S],B[15]F11 RP ([12S],A[14S],B[15]F9 @)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 11 in TGTDATA (Set 15) in TGTDESIG (Segment 14) in AOCID (Segment 12) is required if Field 9 in TGTDATA (Set 15) in the same TGTDESIG (Segment 14) in the same AOCID (Segment 12) occurs, otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]) return for $cond in if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData/DmpiLocation) != 0  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData/DmpiElevation) != 0  else  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData/DmpiElevation) = 0 ))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[14S],B[15]F12 RP ([12S],A[14S],B[15]F10 @)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 12 in TGTDATA (Set 15) in TGTDESIG (Segment 14) in AOCID (Segment 12) is required if Field 10 in TGTDATA (Set 15) in the same TGTDESIG (Segment 14) in the same AOCID (Segment 12) occurs, otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]) return for $cond in if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData/ProbableCoordinateHorizontalCircularError) != 0  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData/ProbableCoordinateElevationLinearError) != 0  else  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/TargetData/ProbableCoordinateElevationLinearError) = 0 ))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[14S],B[16]FG,ZF5 @= 1 ([12S],A[14S],B[16]F4 @)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 5 in the Field Group in GTGTAREA (Set 16) in TGTDESIG (Segment 14) in AOCID (Segment 12) must occur exactly 1 time if Field 4 in the same GTGTAREA (Set 16) in the same TGTDESIG (Segment 14) in the same AOCID (Segment 12) occurs.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]) return xsn:or3(  xsn:not3(  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/GroundTargetArea))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/GroundTargetArea/AreaGeometry) != 0  ),  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/GroundTargetArea))) then false() else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/GroundTargetArea/GroupOfFields/AreaCoordinatesOrOrigin) = 1  )))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[14S],B[16]FG,ZF5 R ([12S],A[14S],B[16]F4 @)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 5 in every Field Group in GTGTAREA (Set 16) in TGTDESIG (Segment 14) in AOCID (Segment 12) is required if Field 4 in the same GTGTAREA (Set 16) in the same TGTDESIG (Segment 14) in the same AOCID (Segment 12) occurs.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]) return xsn:or3(  xsn:not3(  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/GroundTargetArea))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/GroundTargetArea/AreaGeometry) != 0  ),  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/GroundTargetArea))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/GroundTargetArea/GroupOfFields/AreaCoordinatesOrOrigin) != 0  )))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[14S],B[17]F3 R ([12S],A[14S],B[17]F2 !@)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 3 in DESETIME (Set 17) in TGTDESIG (Segment 14) in AOCID (Segment 12) is required if Field 2 in DESETIME (Set 17) in the same TGTDESIG (Segment 14) in the same AOCID (Segment 12) does not occur.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]) return xsn:or3(  xsn:not3(  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/DesiredEffectTime))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/DesiredEffectTime/TimeOnTarget) = 0  ),  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/DesiredEffectTime))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/DesiredEffectTime/NetTimeOnTarget) != 0  )))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[14S],B[17]F4 R ([12S],A[14S],B[17]F3 !@)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 4 in DESETIME (Set 17) in TGTDESIG (Segment 14) in AOCID (Segment 12) is required if Field 3 in DESETIME (Set 17) in the same TGTDESIG (Segment 14) in the same AOCID (Segment 12) does not occur.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation]) return xsn:or3(  xsn:not3(  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/DesiredEffectTime))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/DesiredEffectTime/NetTimeOnTarget) = 0  ),  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/DesiredEffectTime))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedTgtListSegment[TargetDesignation][ $B]/DesiredEffectTime/NltTimeOnTarget) != 0  )))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[20S],B[23]FG,LF1 !EQ [12S],A[20S],B[23]FG,1F1</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 1 in the last occurrence of the Field Group in POLYGON (Set 23) in PDAL (Segment 20) in AOCID (Segment 12) lexicographically must not equal Field 1 in the first occurrence of the Field Group in POLYGON (Set 23) in the same PDAL (Segment 20) in the same AOCID (Segment 12).</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedDefendedAssetListSegment[PrioritizedDefendedAssetList]))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedDefendedAssetListSegment[PrioritizedDefendedAssetList]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedDefendedAssetListSegment[PrioritizedDefendedAssetList][ $B]/ShapePolygon/GroupOfFields[last()]/PolygonPoint))) then 'null' else xsn:and3(  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedDefendedAssetListSegment[PrioritizedDefendedAssetList][ $B]/ShapePolygon/GroupOfFields[1]/PolygonPoint))) then 'null' else string( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedDefendedAssetListSegment[PrioritizedDefendedAssetList][ $B]/ShapePolygon/GroupOfFields[last()]/PolygonPoint) ne string( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/PrioritizedDefendedAssetListSegment[PrioritizedDefendedAssetList][ $B]/ShapePolygon/GroupOfFields[1]/PolygonPoint))))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[25],BF11 RP ([12S],A[25],BF10 @)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 11 in ALLACFT (Set 25) in AOCID (Segment 12) is required if field 10 in the same ALLACFT (Set 25) in the same AOCID (Segment 12) occurs, otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAircraft))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAircraft) return for $cond in if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAircraft[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAircraft[ $B]/StartTime) != 0  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAircraft[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAircraft[ $B]/StopTime) != 0  else  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAircraft[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAircraft[ $B]/StopTime) = 0 ))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[26],BF14 RP ([12S],A[26],BF13 @)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 14 in ALLGBAD (Set 26) in AOCID (Segment 12) is required if field 13 in the same ALLGBAD (Set 25) in the same AOCID (Segment 12) occurs, otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedGbadResources))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedGbadResources) return for $cond in if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedGbadResources[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedGbadResources[ $B]/StartTime) != 0  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedGbadResources[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedGbadResources[ $B]/StopTime) != 0  else  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedGbadResources[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedGbadResources[ $B]/StopTime) = 0 ))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[27],BF9 RP ([12S],A[27],BF8 @)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 9 in ALLASACS (Set 27) in AOCID (Segment 12) is required if field 8 in the same ALLASACS (Set 27) in the same AOCID (Segment 12) occurs, otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAsacsUnit))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAsacsUnit) return for $cond in if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAsacsUnit[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAsacsUnit[ $B]/StartTime) != 0  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAsacsUnit[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAsacsUnit[ $B]/StopTime) != 0  else  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAsacsUnit[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/AllocatedAsacsUnit[ $B]/StopTime) = 0 ))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[12S],A[28],BF6 RP ([12S],A[28],BF5 @)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 6 in CASP (Set 28) in AOCID (Segment 12) is required if field 5 in the same CASP (Set 28) in the same AOCID (Segment 12) occurs, otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]))) then 'null' else xsn:and3( for $A in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification]) return if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/CoordinatedAirSeaProcedures))) then 'null' else xsn:and3( for $B in 1 to count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/CoordinatedAirSeaProcedures) return for $cond in if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/CoordinatedAirSeaProcedures[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/CoordinatedAirSeaProcedures[ $B]/EndPosition) != 0  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/CoordinatedAirSeaProcedures[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/CoordinatedAirSeaProcedures[ $B]/EndTime) != 0  else  if ( not( exists( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/CoordinatedAirSeaProcedures[ $B]))) then 'null' else  count( /*:AirOperationsDirective/AllocatedAocSegment[AnnexIdentification][ $A]/CoordinatedAirSeaProcedures[ $B]/EndTime) = 0 ))</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[29] RP ([3]F10 EQ /CONFIDENTIAL/ | /SECRET/ | /TOP SECRET/ | /RESTRICTED/ | /NATO RESTRICTED/ | /NATO CONFIDENTIAL/ | /NATO SECRET/ | /NATO SECRET-SAVATE/ | /NATO SECRET-AVICULA/ | /COSMIC TOP SECRET/ | /COSMIC TOP SECRET-BOHEMIA/ | /COSMIC TOP SECRET-BALK/ | /COSMIC TOP SECRET ATOMAL/ | /NATO SECRET ATOMAL/ | /NATO CONFIDENTIAL ATOMAL/)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>DECL (Set 29) is required if Field 10 in MSGID (SET 3) lexicographically equals "CONFIDENTIAL" or "SECRET" or "TOP SECRET" or "RESTRICTED" or "NATO RESTRICTED" or "NATO CONFIDENTIAL" or "NATO SECRET" or "NATO SECRET-SAVATE" or "NATO SECRET-AVICULA" or "COSMIC TOP SECRET" or "COSMIC TOP SECRET-BOHEMIA" or "COSMIC TOP SECRET-BALK" or "COSMIC TOP SECRET ATOMAL" or "NATO SECRET ATOMAL" or "NATO CONFIDENTIAL ATOMAL" otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>for $cond in  if ( not( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) and not( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*))) then 'null' else xsn:or3(  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "CONFIDENTIAL",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "SECRET",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "TOP SECRET",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "RESTRICTED",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO RESTRICTED",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO CONFIDENTIAL",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET-SAVATE",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET-AVICULA",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET-BOHEMIA",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET-BALK",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "COSMIC TOP SECRET ATOMAL",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO SECRET ATOMAL",  string( if ( exists( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*)) then string-join( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*/*,"") else string( /*:AirOperationsDirective/MessageIdentifier/MessageSecurityClassification/*)) eq "NATO CONFIDENTIAL ATOMAL")  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  count( /*:AirOperationsDirective/MessageDowngradingOrDeclassificationData) != 0  else  count( /*:AirOperationsDirective/MessageDowngradingOrDeclassificationData) = 0</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <MtfStructuralRelationship>
    <MtfStructuralRelationshipRule>[29]F2 RP ([29]F1 = FF679-4)</MtfStructuralRelationshipRule>
    <MtfStructuralRelationshipExplanation>Field 2 in DECL (Set 29) is required if Field 1 in DECL (Set 29) uses alternative ORIGINAL CLASSIFICATION AUTHORITY (FF679-4) otherwise it is prohibited.</MtfStructuralRelationshipExplanation>
    <MtfStructuralRelationshipXmlSnRule />
    <MtfStructuralRelationshipXsnRule>for $cond in if ( not( exists( /*:AirOperationsDirective/MessageDowngradingOrDeclassificationData/SourceForClassification))) then 'null' else xsn:or3(  exists( /*:AirOperationsDirective/MessageDowngradingOrDeclassificationData/SourceForClassification/OriginalClassificationAuthority))  return if ( $cond instance of xs:string) then 'null' else if ( $cond) then  if ( not( exists( /*:AirOperationsDirective/MessageDowngradingOrDeclassificationData))) then 'null' else  count( /*:AirOperationsDirective/MessageDowngradingOrDeclassificationData/ReasonForClassification) != 0  else  if ( not( exists( /*:AirOperationsDirective/MessageDowngradingOrDeclassificationData))) then 'null' else  count( /*:AirOperationsDirective/MessageDowngradingOrDeclassificationData/ReasonForClassification) = 0</MtfStructuralRelationshipXsnRule>
   </MtfStructuralRelationship>
   <VersionIndicator>B.1.01.04</VersionIndicator>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
<xsd:sequence><xsd:choice minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:appinfo>
   <AlternativeType>Mutually Exclusive, None Required</AlternativeType>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:element name="ExerciseIdentification" minOccurs="0" maxOccurs="1">
  <xsd:annotation>
   <xsd:documentation>The EXER set provides the designated code name or nickname, if the message supports an exercise.</xsd:documentation>
   <xsd:appinfo>
    <SetFormatPositionName>EXERCISE IDENTIFICATION</SetFormatPositionName>
    <SetFormatPositionNumber>1</SetFormatPositionNumber>
    <SetFormatPositionConcept>The EXER set provides the designated code name or nickname, if the message supports an exercise.</SetFormatPositionConcept>
    <SetFormatPositionUseDescription />
    <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
    <Repeatability>1</Repeatability>
   </xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="s:ExerciseIdentificationType">
     <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="1" />
     <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>
 <xsd:element name="OperationIdentificationData" minOccurs="0" maxOccurs="1">
  <xsd:annotation>
   <xsd:documentation>The OPER set provides the designated code name or nickname, if the message supports an operation.</xsd:documentation>
   <xsd:appinfo>
    <SetFormatPositionName>OPERATION IDENTIFICATION DATA</SetFormatPositionName>
    <SetFormatPositionNumber>2</SetFormatPositionNumber>
    <SetFormatPositionConcept>The OPER set provides the designated code name or nickname, if the message supports an operation.</SetFormatPositionConcept>
    <SetFormatPositionUseDescription />
    <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
    <Repeatability>1</Repeatability>
   </xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="s:OperationIdentificationDataType">
     <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="2" />
     <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>
</xsd:choice>

<xsd:element name="MessageIdentifier" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The MSGID set provides the message identification and originator.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>MESSAGE IDENTIFIER</SetFormatPositionName>
   <SetFormatPositionNumber>3</SetFormatPositionNumber>
   <SetFormatPositionConcept>The MSGID set provides the message identification and originator.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:MessageIdentifierType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="3" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="Reference" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The REF set provides both USMTF and non-USMTF references.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>REFERENCE</SetFormatPositionName>
   <SetFormatPositionNumber>4</SetFormatPositionNumber>
   <SetFormatPositionConcept>The REF set provides both USMTF and non-USMTF references.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:ReferenceType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="4" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="PeriodOfTime" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The PERIOD set specifies the timeframe within which the information contained in the AOD is effective.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>PERIOD OF TIME</SetFormatPositionName>
   <SetFormatPositionNumber>5</SetFormatPositionNumber>
   <SetFormatPositionConcept>The PERIOD set specifies the timeframe within which the information contained in the AOD is effective.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:PeriodOfTimeType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="5" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="Acknowledge" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The AKNLDG set specifies requirements for operator acknowledgment (not for communications center acknowledgment).</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>ACKNOWLEDGE</SetFormatPositionName>
   <SetFormatPositionNumber>6</SetFormatPositionNumber>
   <SetFormatPositionConcept>The AKNLDG set specifies requirements for operator acknowledgment (not for communications center acknowledgment).</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AcknowledgeType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="6" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="DayOfReference" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The REFDAY set specifies the reference day of the exercise/operation, expressed by an alpha code and a numeric counter.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>DAY OF REFERENCE</SetFormatPositionName>
   <SetFormatPositionNumber>7</SetFormatPositionNumber>
   <SetFormatPositionConcept>The REFDAY set specifies the reference day of the exercise/operation, expressed by an alpha code and a numeric counter.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:DayOfReferenceType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="7" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeneralText_1" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GENTEXT/COMMANDERS COMMENTS set specifies references as decided by the commander, such as friendly and enemy forces situation including TBM threats, overall alert status, resource allocation, Joint Prioritized Targets List (JPTL), ROE, OPLAN/SUPLAN information (plan status, operational planning priorities, command and control) and other essential information.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GENERAL TEXT</SetFormatPositionName>
   <SetFormatPositionNumber>8</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GENTEXT/COMMANDERS COMMENTS set specifies references as decided by the commander, such as friendly and enemy forces situation including TBM threats, overall alert status, resource allocation, Joint Prioritized Targets List (JPTL), ROE, OPLAN/SUPLAN information (plan status, operational planning priorities, command and control) and other essential information.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>Field 1 of the GENTEXT set must equal "COMMANDERS COMMENTS".</SetFormatPositionUseDescription>
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeneralTextType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="8" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeneralText_2" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GENTEXT/DIRECTIVE AND GUIDANCE set specifies the commander's intentions, priorities, objectives and additional instructions from air component command and higher commander's perspective.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GENERAL TEXT</SetFormatPositionName>
   <SetFormatPositionNumber>9</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GENTEXT/DIRECTIVE AND GUIDANCE set specifies the commander's intentions, priorities, objectives and additional instructions from air component command and higher commander's perspective.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>Field 1 of the GENTEXT set must equal "DIRECTIVE AND GUIDANCE".</SetFormatPositionUseDescription>
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeneralTextType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="9" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeodeticDatum" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GEODATUM set identifies the geodetic datum being used for geographic locations in the message.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GEODETIC DATUM</SetFormatPositionName>
   <SetFormatPositionNumber>10</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GEODATUM set identifies the geodetic datum being used for geographic locations in the message.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeodeticDatumType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="10" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="PointOfContactInformation" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The POC set provides point of contact information for the AOD.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>POINT OF CONTACT INFORMATION</SetFormatPositionName>
   <SetFormatPositionNumber>11</SetFormatPositionNumber>
   <SetFormatPositionConcept>The POC set provides point of contact information for the AOD.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:PointOfContactInformationType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="11" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
<xsd:element name="AllocatedAocSegment" minOccurs="1" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The sets AOCID to CASP form a MANDATORY SEGMENT to provide details on the allocated directives, tasks and resources.</xsd:documentation>
  <xsd:appinfo>
   <SegmentStructureName>ALLOCATED AOC SEGMENT</SegmentStructureName>
   <SegmentStructureConcept />
   <SegmentStructureUseDescription>The sets AOCID to CASP form a MANDATORY SEGMENT to provide details on the allocated directives, tasks and resources.</SegmentStructureUseDescription>
   <InitialSetFormatPosition>12</InitialSetFormatPosition>
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
   <VersionIndicator />
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
<xsd:sequence>

<xsd:element name="AnnexIdentification" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The AOCID set specifies the identification of the AOD annex (original or change x) for each addressee unit.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>ANNEX IDENTIFICATION</SetFormatPositionName>
   <SetFormatPositionNumber>12</SetFormatPositionNumber>
   <SetFormatPositionConcept>The AOCID set specifies the identification of the AOD annex (original or change x) for each addressee unit.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AnnexIdentificationType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="12" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeneralText_3" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GENTEXT/AOC DIRECTIVE AND GUIDANCE set specifies the mission types concerning the AOD.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GENERAL TEXT</SetFormatPositionName>
   <SetFormatPositionNumber>13</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GENTEXT/AOC DIRECTIVE AND GUIDANCE set specifies the mission types concerning the AOD.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>Field 1 of the GENTEXT set must equal "AOC DIRECTIVE AND GUIDANCE".</SetFormatPositionUseDescription>
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeneralTextType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="13" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
<xsd:element name="PrioritizedTgtListSegment" minOccurs="1" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The sets TGTDESIG to GENTEXT (ATTACK LIMITATION) form a MANDATORY NESTED SEGMENT to provide essential details on the allocated target list.</xsd:documentation>
  <xsd:appinfo>
   <SegmentStructureName>PRIORITIZED TGT LIST SEGMENT</SegmentStructureName>
   <SegmentStructureConcept />
   <SegmentStructureUseDescription>The sets TGTDESIG to GENTEXT (ATTACK LIMITATION) form a MANDATORY NESTED SEGMENT to provide essential details on the allocated target list.</SegmentStructureUseDescription>
   <InitialSetFormatPosition>14</InitialSetFormatPosition>
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
   <VersionIndicator />
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
<xsd:sequence>

<xsd:element name="TargetDesignation" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The TGTDESIG set specifies essential designation information about the target.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>TARGET DESIGNATION</SetFormatPositionName>
   <SetFormatPositionNumber>14</SetFormatPositionNumber>
   <SetFormatPositionConcept>The TGTDESIG set specifies essential designation information about the target.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:TargetDesignationType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="14" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="TargetData" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The TGTDATA set specifies operational information about the target.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>TARGET DATA</SetFormatPositionName>
   <SetFormatPositionNumber>15</SetFormatPositionNumber>
   <SetFormatPositionConcept>The TGTDATA set specifies operational information about the target.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:TargetDataType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="15" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GroundTargetArea" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GTGTAREA set specifies essential information about the ground target area.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GROUND TARGET AREA</SetFormatPositionName>
   <SetFormatPositionNumber>16</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GTGTAREA set specifies essential information about the ground target area.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GroundTargetAreaType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="16" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="DesiredEffectTime" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The DESETIME set specifies desired effect, the time on target and/or the time window over target. At least one out of "time on target", "not earlier than on target" or "not later than on target" fields must be used.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>DESIRED EFFECT TIME</SetFormatPositionName>
   <SetFormatPositionNumber>17</SetFormatPositionNumber>
   <SetFormatPositionConcept>The DESETIME set specifies desired effect, the time on target and/or the time window over target. At least one out of "time on target", "not earlier than on target" or "not later than on target" fields must be used.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:DesiredEffectTimeType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="17" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="GeneralText_4" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The GENTEXT/ATTACK LIMITATION set specifies information about limitations or restrictions to be observed while attacking a target.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>GENERAL TEXT</SetFormatPositionName>
   <SetFormatPositionNumber>18</SetFormatPositionNumber>
   <SetFormatPositionConcept>The GENTEXT/ATTACK LIMITATION set specifies information about limitations or restrictions to be observed while attacking a target.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>Field 1 of the GENTEXT set must equal "ATTACK LIMITATION".</SetFormatPositionUseDescription>
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:GeneralTextType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="18" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="segSeq" type="xsd:unsignedShort" fixed="14" /><xsd:attributeGroup ref="ism:SecurityAttributesGroup" /></xsd:complexType>
</xsd:element>

<xsd:element name="CollectionTaskingList" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The CTL set specifies a list of assets (targets) for information collection</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>COLLECTION TASKING LIST</SetFormatPositionName>
   <SetFormatPositionNumber>19</SetFormatPositionNumber>
   <SetFormatPositionConcept>The CTL set specifies a list of assets (targets) for information collection</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:CollectionTaskingListType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="19" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
<xsd:element name="PrioritizedDefendedAssetListSegment" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The sets PDAL through ELLIPSE form an OPERATIONALLY DETERMINED NESTED SEGMENT to provide details on the defended assets.</xsd:documentation>
  <xsd:appinfo>
   <SegmentStructureName>PRIORITIZED DEFENDED ASSET LIST SEGMENT</SegmentStructureName>
   <SegmentStructureConcept />
   <SegmentStructureUseDescription>The sets PDAL through ELLIPSE form an OPERATIONALLY DETERMINED NESTED SEGMENT to provide details on the defended assets.</SegmentStructureUseDescription>
   <InitialSetFormatPosition>20</InitialSetFormatPosition>
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
   <VersionIndicator />
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
<xsd:sequence>

<xsd:element name="PrioritizedDefendedAssetList" minOccurs="1" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The PDAL set provides the prioritized assets to be defended by the air component command. Assets may include airspace volumes by name as specified in the Airspace Control Order (ACO).</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>PRIORITIZED DEFENDED ASSET LIST</SetFormatPositionName>
   <SetFormatPositionNumber>20</SetFormatPositionNumber>
   <SetFormatPositionConcept>The PDAL set provides the prioritized assets to be defended by the air component command. Assets may include airspace volumes by name as specified in the Airspace Control Order (ACO).</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:PrioritizedDefendedAssetListType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="20" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
<xsd:choice minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:appinfo>
   <AlternativeType>Mutually Exclusive, None Required</AlternativeType>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:element name="ShapePoint" minOccurs="0" maxOccurs="1">
  <xsd:annotation>
   <xsd:documentation>The APOINT set defines a defended asset area point.</xsd:documentation>
   <xsd:appinfo>
    <SetFormatPositionName>SHAPE POINT</SetFormatPositionName>
    <SetFormatPositionNumber>21</SetFormatPositionNumber>
    <SetFormatPositionConcept>The APOINT set defines a defended asset area point.</SetFormatPositionConcept>
    <SetFormatPositionUseDescription />
    <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
    <Repeatability>1</Repeatability>
   </xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="s:ShapePointType">
     <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="21" />
     <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>
 <xsd:element name="ShapeCircle" minOccurs="0" maxOccurs="1">
  <xsd:annotation>
   <xsd:documentation>The CIRCLE set defines a circular shaped defended asset area.</xsd:documentation>
   <xsd:appinfo>
    <SetFormatPositionName>SHAPE CIRCLE</SetFormatPositionName>
    <SetFormatPositionNumber>22</SetFormatPositionNumber>
    <SetFormatPositionConcept>The CIRCLE set defines a circular shaped defended asset area.</SetFormatPositionConcept>
    <SetFormatPositionUseDescription />
    <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
    <Repeatability>1</Repeatability>
   </xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="s:ShapeCircleType">
     <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="22" />
     <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>
 <xsd:element name="ShapePolygon" minOccurs="0" maxOccurs="1">
  <xsd:annotation>
   <xsd:documentation>The POLYGON set defines a polygon shaped defended asset area.</xsd:documentation>
   <xsd:appinfo>
    <SetFormatPositionName>SHAPE POLYGON</SetFormatPositionName>
    <SetFormatPositionNumber>23</SetFormatPositionNumber>
    <SetFormatPositionConcept>The POLYGON set defines a polygon shaped defended asset area.</SetFormatPositionConcept>
    <SetFormatPositionUseDescription />
    <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
    <Repeatability>1</Repeatability>
   </xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="s:ShapePolygonType">
     <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="23" />
     <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>
 <xsd:element name="Ellipse" minOccurs="0" maxOccurs="1">
  <xsd:annotation>
   <xsd:documentation>The ELLIPSE set defines an ellipse shaped defended asset area.</xsd:documentation>
   <xsd:appinfo>
    <SetFormatPositionName>ELLIPSE</SetFormatPositionName>
    <SetFormatPositionNumber>24</SetFormatPositionNumber>
    <SetFormatPositionConcept>The ELLIPSE set defines an ellipse shaped defended asset area.</SetFormatPositionConcept>
    <SetFormatPositionUseDescription />
    <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
    <Repeatability>1</Repeatability>
   </xsd:appinfo>
  </xsd:annotation>
  <xsd:complexType>
   <xsd:complexContent>
    <xsd:extension base="s:EllipseType">
     <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="24" />
     <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
    </xsd:extension>
   </xsd:complexContent>
  </xsd:complexType>
 </xsd:element>
</xsd:choice>
</xsd:sequence>
<xsd:attribute name="segSeq" type="xsd:unsignedShort" fixed="20" /><xsd:attributeGroup ref="ism:SecurityAttributesGroup" /></xsd:complexType>
</xsd:element>

<xsd:element name="AllocatedAircraft" minOccurs="1" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The ALLACFT set specifies information about the aircraft allocated to the AOC(s) for the period covered by the directive.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>ALLOCATED AIRCRAFT</SetFormatPositionName>
   <SetFormatPositionNumber>25</SetFormatPositionNumber>
   <SetFormatPositionConcept>The ALLACFT set specifies information about the aircraft allocated to the AOC(s) for the period covered by the directive.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Mandatory</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AllocatedAircraftType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="25" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="AllocatedGbadResources" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The ALLGBAD set specifies information about the ground based air defense resources allocated to the AOC(s) for the period covered by the directive.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>ALLOCATED GBAD RESOURCES</SetFormatPositionName>
   <SetFormatPositionNumber>26</SetFormatPositionNumber>
   <SetFormatPositionConcept>The ALLGBAD set specifies information about the ground based air defense resources allocated to the AOC(s) for the period covered by the directive.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AllocatedGbadResourcesType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="26" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="AllocatedAsacsUnit" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The ALLASACS set specifies information about the air surveillance and control system units allocated to the AOC(s) for the period covered by the directive.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>ALLOCATED ASACS UNIT</SetFormatPositionName>
   <SetFormatPositionNumber>27</SetFormatPositionNumber>
   <SetFormatPositionConcept>The ALLASACS set specifies information about the air surveillance and control system units allocated to the AOC(s) for the period covered by the directive.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:AllocatedAsacsUnitType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="27" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="CoordinatedAirSeaProcedures" minOccurs="0" maxOccurs="unbounded">
 <xsd:annotation>
  <xsd:documentation>The CASP set specifies information about the ship designated for Coordinated Air-Sea Procedures (CASP).</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>COORDINATED AIR SEA PROCEDURES</SetFormatPositionName>
   <SetFormatPositionNumber>28</SetFormatPositionNumber>
   <SetFormatPositionConcept>The CASP set specifies information about the ship designated for Coordinated Air-Sea Procedures (CASP).</SetFormatPositionConcept>
   <SetFormatPositionUseDescription />
   <OccurrenceCategory>Operationally Determined</OccurrenceCategory>
   <Repeatability>unbounded</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:CoordinatedAirSeaProceduresType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="28" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="segSeq" type="xsd:unsignedShort" fixed="12" /><xsd:attributeGroup ref="ism:SecurityAttributesGroup" /></xsd:complexType>
</xsd:element>

<xsd:element name="Remarks" minOccurs="0" maxOccurs="1">
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:RemarksType">
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>
<xsd:element name="MessageDowngradingOrDeclassificationData" minOccurs="0" maxOccurs="1">
 <xsd:annotation>
  <xsd:documentation>The DECL set provides declassification or downgrading instructions, if the message is classified.</xsd:documentation>
  <xsd:appinfo>
   <SetFormatPositionName>MESSAGE DOWNGRADING OR DECLASSIFICATION DATA</SetFormatPositionName>
   <SetFormatPositionNumber>29</SetFormatPositionNumber>
   <SetFormatPositionConcept>The DECL set provides declassification or downgrading instructions, if the message is classified.</SetFormatPositionConcept>
   <SetFormatPositionUseDescription>The DECL set is REQUIRED if Field 10 in the MSGID set lexicographically equals "CONFIDENTIAL" or "SECRET" or "TOP SECRET" or "RESTRICTED" or "NATO RESTRICTED" or "NATO CONFIDENTIAL" or "NATO SECRET" or "NATO SECRET-SAVATE" or "NATO SECRET-AVICULA" or "COSMIC TOP SECRET" or "COSMIC TOP SECRET-BOHEMIA" or "COSMIC TOP SECRET-BALK" or "COSMIC TOP SECRET ATOMAL" or "NATO SECRET ATOMAL" or "NATO CONFIDENTIAL ATOMAL", otherwise the DECL set is PROHIBITED.</SetFormatPositionUseDescription>
   <OccurrenceCategory>Conditional</OccurrenceCategory>
   <Repeatability>1</Repeatability>
  </xsd:appinfo>
 </xsd:annotation>
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="s:MessageDowngradingOrDeclassificationDataType">
    <xsd:attribute name="setSeq" type="xsd:unsignedShort" fixed="29" />
    <xsd:attributeGroup ref="ism:SecurityAttributesGroup" />
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element></xsd:sequence>
<xsd:attribute name="mtfid" type="xsd:string" fixed="AOD" /><xsd:attributeGroup ref="ism:SecurityAttributesGroup" /></xsd:complexType>
</xsd:element></xsd:schema>